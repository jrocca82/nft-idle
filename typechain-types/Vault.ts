/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "claim(uint256)": FunctionFragment;
    "currency()": FunctionFragment;
    "getAuth(address)": FunctionFragment;
    "getBalance(uint256)": FunctionFragment;
    "getUser(address)": FunctionFragment;
    "land()": FunctionFragment;
    "landDetails(uint256)": FunctionFragment;
    "marketplace()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalance(uint256)": FunctionFragment;
    "setCurrency(address)": FunctionFragment;
    "setMarketplace(address)": FunctionFragment;
    "setOwnerAndStartEarn(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claim", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "getAuth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getUser", values: [string]): string;
  encodeFunctionData(functionFragment: "land", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "landDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setCurrency", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMarketplace",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerAndStartEarn",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "land", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "landDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerAndStartEarn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    getAuth(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    getBalance(
      _landId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUser(_address: string, overrides?: CallOverrides): Promise<[boolean]>;

    land(overrides?: CallOverrides): Promise<[string]>;

    landDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        lastClaimTime: BigNumber;
        balance: BigNumber;
      }
    >;

    marketplace(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBalance(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrency(
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketplace(
      _marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerAndStartEarn(
      _landId: BigNumberish,
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim(
    _landId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currency(overrides?: CallOverrides): Promise<string>;

  getAuth(_address: string, overrides?: CallOverrides): Promise<boolean>;

  getBalance(
    _landId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

  land(overrides?: CallOverrides): Promise<string>;

  landDetails(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      owner: string;
      lastClaimTime: BigNumber;
      balance: BigNumber;
    }
  >;

  marketplace(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBalance(
    _landId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrency(
    _currencyAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketplace(
    _marketplace: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerAndStartEarn(
    _landId: BigNumberish,
    _userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim(_landId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    currency(overrides?: CallOverrides): Promise<string>;

    getAuth(_address: string, overrides?: CallOverrides): Promise<boolean>;

    getBalance(
      _landId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(_address: string, overrides?: CallOverrides): Promise<boolean>;

    land(overrides?: CallOverrides): Promise<string>;

    landDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        owner: string;
        lastClaimTime: BigNumber;
        balance: BigNumber;
      }
    >;

    marketplace(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setBalance(_landId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCurrency(
      _currencyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketplace(
      _marketplace: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerAndStartEarn(
      _landId: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    claim(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    getAuth(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(
      _landId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUser(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    land(overrides?: CallOverrides): Promise<BigNumber>;

    landDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketplace(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBalance(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrency(
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketplace(
      _marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerAndStartEarn(
      _landId: BigNumberish,
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuth(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(
      _landId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUser(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    land(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    landDetails(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplace(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBalance(
      _landId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrency(
      _currencyAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketplace(
      _marketplace: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerAndStartEarn(
      _landId: BigNumberish,
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
